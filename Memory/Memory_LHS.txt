메모리 구조

프로그램이 실행되면 메모리(RAM)에 공간을 할당해 줌

할당해주는 공간은
1.텍스트
2.데이터
3.힙
4.스택

텍스트의 영역은 실행할 프로그램의 코드가 저장되는 영역임.
함수, 제어문 , 상수 등이 이곳에 저장됨

데이터 영역은 전역 변수와 static변수가 할당되는 영역.
프로그램이 종료될 때 소멸되는 영역임.

힙 영역은 텍스트와 데이터가 사용되고 남은 낮은 주소부터 사용됨.
동적 할당에 사용되는 영역으로 프로그램이 실행되는 런타임에 크기가 결정됨.

스택 영역은 지역변수와 매개변수가 저장되는 영역으로 높은 주소부터 사용됨.
함수의 호출 시 할당되는 영역이며 함수의 호출이 완료되면 소멸되는 영역임.

함수가 호출되면 스택에 매개변수, 반환 주소값, 지역변수 등이 저장된.
스택 영역 내부에선 후입선출 방식으로 동작.

함수의 호출이 무수히 많아질 때 데이터가 스택 영역을 넘기도 하는데 이를 스택 오버플로우라 함.
마찬가지로 힙 영역에서도 힙 오버플로우가 발생할 수 있으며 이는 프로그램 상 큰 오류이며 보안의 취약점으로 작용할 수 있음.

포인터

메모리의 주소값임

포인터 변수

메모리의 주소값을 담는 변수임

예:
int *ptr = &a; (a는 int형 변수)

타입 *포인터이름 = 주소값(또는 &변수이름)으로 선언함

*는 참조 연산자, &는 역참조 연산자 또는 주소 연산자 라고 함.

포인터의 포인터

예:

int *pptr = &ptr;
==
int **pptr = ptr;

포인터 연산

포인터로 연산 하면 포인터 선언 할 때 지정해준 자료형의 크기만큼 곱해져서 연산됨.
자료형이 사용하는 메모리의 중간으로 들어갈 수 없다는 말임.

레퍼런스

이름 그대로 참조 하는 것임.
 예:
 int a=10;
 int &b = a;

이 때 b는 실제로 생성된 변수가 아닌 a를 참조한 것이며 b에 대한 연산은 a에도 동일하게 적용됨.

b라는 이름으로 a를 참조하여 사용하는 것임.

