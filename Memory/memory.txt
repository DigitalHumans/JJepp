<메모리 구조>
텍스트
데이터 -> 전역변수와 static변수할당
힙 -> 동적할당을 하면 힙을 사용 (직접 접근)
빈 공간
스택 -> 함수를 호출하거나 변수를 생성하면 스택을 사용, 지역변수와 매개변수 할당 (함수를 빠져나가면 소멸됨)

스택이 아래에서 위로 쌓임
힙은 위에서 아래로 내려감
0번지가 위쪽

<포인터>
포인터 : 메모리의 주소 값
포인터 변수 : 메모리의 주소값으 저장하기 위한 변수
-> 사용하고자 하는 자료형에 따라 포인터 변수를 선언하는 방법이 달라진다.

ex) int * 는 int형 변수에 할당된 메모리의 주소를 담을 수 있는 포인터
    double * 는 double형 변수에 할당된 메모리의 주소를 담을 수 있는 포인터
    float * 는 float형 변수에 할당된 메모리의 주소를 담을 수 있는 포인터

포인터형 변수는 64bit에서는 8byte, 32bit에서는 4byte

<포인터의 이용>
포인터 이름은 주소값을 가진다.
역참조 연산(*)을 통해 해당 주소에 있는 내용물을 가져올 수 있다.
포인터의 포인터는 **로 표시.

ex) int a=13; int *p=&a; // p는 a의 주소를 가지고 있다.
int **pp=&p; // pp는 p의 주소를 가지고 있다.
*pp=p=&a, **p=*p=a

포인터에 +,-연산을 할 경우 해당 포인터가 가리키는 자료형의 크기 * 오른쪽 피연산자 만큼 움직인다.

예) int a=13;, int *p=&a;
p + 3 : a의 주소에서 int의 크기 * 3만큼 더한 주소를 가리킨다.

<배열과 포인터>
배열은 포인터 기반으로 동작한다.
배열의 이름은 배열의 0번원소를 가리키는 포인터
int arr[4] = {3, 7, 5, 9};
여기에서 arr[2]와 *(arr+2)는 같다.

<레퍼런스>
변수 앞에 &를 붙여 레퍼런스로 표기
해당 객체를 공유한다

예) int a=13; int &b=a; b=23; // a도 24로 바뀜.
일반 객체를 사용하는 것처럼 사용하지만 객체를 공유하므로 메모리가 절약됨.
& 대신 &&을 붙이는 rvalue 레퍼런스도 존재.(여기서 다루지 않음)

<함수>
하나의 작업을 하는 일련의 명령어들을 모아놓은 것.
같은 작업을 할 때 함수를 구현해두고 호출하면 같은 명령을 반복해서 사용하지 않아도 된다.
호출시마다 함수 실행코드의 복사본이 스택에 올라가고 인자들을 해당 복사본으로 전송한 후, 돌아올 주소를 전송한다. 그 후 해당 복사본 위치로 점프한다.
함수 수행 이후 반환값을 도아갈 주소측에 전송한 후 돌아갈 주소로 점프한다.

<함수 선언>
반환타입 이름(매개변수); //프로토타입 선언

반환타입 이름(매개변수)
{
	내용물;
} //함수 정의
반환 타입에서의 void는 반환값이 없다는 의미이다.

<리커전>
정의를 할 때 자기 자신을 호출하는 함수를 재귀함수라고 한다.
과도한 재귀는 함수 호출 스택을 꽉 채울 수 있어 주의가 필요하다.