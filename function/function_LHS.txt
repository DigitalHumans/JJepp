과제3
인라인 함수, 함수 포인터, 람다 정리

inline 함수

함수의 작동 방식인 호출, 실행, 반환을 거치지 아니하고 호출과 함께 실행하는 함수

예
inline 반환자료형 함수이름(argument){반환하고자 하는 실행 코드};

호출 시간에 비해 실행 시간이 매우 짧은 함수를 사용할 때 시간을 절약할 수 있음.

컴파일러에 따라 인라인을 표기하더라도 무시할 수도 있고 인라인 표기가 되지 않은 함수라도 인라이닝을 할 수 있다.
C에서는 define을 이용한 매크로 함수로 사용되었으나 더 안전한 동작 가능

함수 포인터

포인터 변수가 변수의 주소를 저장한다면 함수 포인터는 함수의 주소를 이용함.

예:
임의의 함수 void func(int);가 있을 때
void (*funcptr)(int) = func;

lambda
익명함수

함수 포인터 대신 사용함.

[사용할 외부변수](파라미터)->반환형{몸통};

외부변수, 파라미터, 반환형은 경우에 따라 생략 가능함.

사용할 외부 변수에선 캡처를 하여 람다에서 사용할 외부 변수를 가져오며 참조 또는 복사를 이용함.
없다면 생략 가능

파라미터에선 argument를 받아올 파라미터의 형태를 적어준다. 
없다면 생략 가능

반환형에서는 함수에서 반환할 자료형을 명시해준다.
void에선 ->자료형 생략 가능

몸통에서는 동작할 함수의 코드를 적어준다.

auto를 이용해 저장한 후 사용할 수 있다.
예:
auto func = [](auto& a){cout << a;};

함수의 argument로 함수의 포인터 대신 사용 가능함.


