배열 (array)
같은 타입의 변수들로 이루어진 집합
예: int array[4]={1,2,3,3};

자료형 배열이름[배열길이]={내용물}로 이루어짐

선언 방식에 따라 배열길이 또는 내용물 생략 가능

내용물을 생략하고 선언후 초기화시 각 요소별로 초기화 해줘야 함

예:
1. int array[3]={1,1,1};
2. int array[]={1,1,1};
3. int array[3]={};

위의 형태를 1차원 배열이라고 함.

2차원 배열
자료형 배열이름[열의길이][행의길이]={2차원내용물};

선언 방식은 동일함. 단 내용물의 초기화 방식은 여러가지가 존재함.
1. 1차원 배열과 같이 총 내용물의 수 만큼 1차원 배열의 형식으로 초기화 가능.
2. 각 행과 열 별로 중괄호로 나누어 초기화 가능.

예:
1. int array[3][2]={1,1,1,1,1,1};
2. int array[3][2]={{1,1,1},{1,1,1};

이후 다차원 배열도 동일함.

문자열

C에서 string을 사용하지 아니하고 문자열을 만들 때 사용하는 방식이 문자의 배열임.

예:
char chaaaar[]= "Char is not Tsar";

char의 배열을 이용한 문자열에서는 문장의 끝을 알리기 위해 NULL문자를 이용하며 명시하지 않아도
포함되어 있기 때문에 글자수에 비해 배열의 크기가 1 크다.

String 클래스

"이것은 문자형 배열이 아닙니다. 하나의 클라-스입니다."

그렇기 때문에 string을 사용하기 위해서는 string 헤더파일을 포함해줘야 한다.

예:
string s = "string is stronger than Tsar"

C에서 문자열을 대입하기 위해 사용되던 strcpy() 같은 함수 없이 대입연산자 만으로 문자열의 대입이 가능.

동적 할당

동적 할당을 사용하는 이유: ㅁㅔ모리 관리 등. 내 램은 빵빵하고 내가 짜는 코드는 너무 가벼워서 아직 잘 모르겠음.

특히 문자열의 입출력의 경우 어느 길이의 문자열이 들어올지 모르기 때문에 
공간 부족으로 인한 데이터 손실이나 메모리 낭비를 막기 위해 사용.

C언어에서의 동적 할당 방식 malloc(아옳옳옳옳), free

CPP에서의 동적 할당 방식 new(new!), delete

단, 생성자를 써놓고 소멸자로 없애주지 않으면 ㅁㅔ모리 누수가 발생하니 주의하자.


