●메모리 구조 
0번 주소를 낮은 쪽이라 하고 , 주소가 양수로 증가하는 방향을 높은 쪽 주소라 할 때 

OS 등 기본 프로그램이 차지하는 메모리 주소공간을 제외한 낮은 쪽 주소부터 

프로그램 코드, 전역변수 정적 변수, heap 영역, stack영역이 순서 대로 존재한다

+간단 사전 지식 
프로그램 카운터 
줄여서 PC 라고도 함
PC는 실행가능한 프로그램을 명령어 하나하나씩 가리키는 명령어주소를 담는 공간이며 분기가 아닐시 명령이 실행될 때 마다 명령어 한줄의 크기만큼 더해지며 다음 명려어로 이동한다.
분기(주로 if)의 경우 실행되는 명령어가 다음 명령어가 아니고 특정명령어의 위치까지 뛰어넘어야 하는 경우가 있다 이때는 도착지(어셈블리 레벨에서 라밸로 표시되기도 한다.)의 명령어의 주소만큼 뛰어 넘는다.

프로시져(procedure)
개략적으로 프로그램에서 실행되는 기본적인 명령어 묶음이다.


-프로그램 코드의 영역
프로그램의 명령어 목록이 저장되는 공간으로 PC 프로그램 카운터의 지목에따라 명령어를 하나씩 읽어들이는 메모리 영역이다. 

-데이터 영역 
프로그램 실행 도중에 새롭게 생성되거나 소멸하지 않도록 할당 상태가 변하지 않는 정적인 영역으로 
전역변수, 변수가 아닌 상수 등이 저장된다. 
리털럴 : ""로 입력된 문자열, 변수 대입시 사용된 프로그램코드 속 글씨로써의 상수 등
심볼릭 : #define 으로 정의된 상수, const 접두사가 붙은 상수
정적변수 : 실행 중 단한번 초기화되는 상수

https://rubberduck.tistory.com/15 참고


-힙 영역

컴파일러가 아닌 프로그래머의 의도에 의해 생성되는 변수가 할당되는 영역이다.

새롭게 생성한 클래스의 인스턴스, molloc명령어를 사용하여 할당하는 동적할당되는 변수들이 등이 저장되는 영역이다.


-스택영역

함수등 프로그램의 묶임을 실행하는 구문에서 
지역 변수
형식 매개 변수
임시 변수
반환 주소
등 함수 실행에 필요한 메모리 공간을 프로그램 스스로 할당한다. 

이때 PC는 프로그램 코드 영역에서 스택에서 실행해야할 함수로 이동하고 스택위에서 호출된 위치로부터 상대적으로 이동하며 프로그램 목록을 실행한다.
그리고 함수의 동작이 완료되면 반환주소를 통해 프로그램코드로 이동한다.  





●포인터

주소에 저장된 변수를 반환하는 개념으로 변수를 가리키는 주소(래퍼런스)를 가지변서 사용은 변수값(벨류)를 사용할 수 있다는 특징에서 
변수를 가리키는 값 포인터로 생각할 수 있다.

-포인터 변수

포인터 변수는 주소값을 저정하는 참조주소 전용 변수이다.

포인터 변수는 일반변수와 대입연산 이 불가능하다. 컴파일러 수준에서 일반적인 변수와 메모리 주소간의 관계는 서로 연산할 수 없는 것으로 여겨 오류로 처리하기 떄문이다.
문자와 숫자가 서로 연산되지 않는 경우와 비슷하다. 

그러나 주소와 상수 주소끼리의 연산은 가능함하다.
그것이 포인터 변수를 통해 주소를 변수형태로 다룰 수 있게하고 연산시켜 변경할 수 있게함이다.

이러한 포인터는 변수의 위치를 직접 가리켜 변수값을 이용하거나 혹은  알맞는 변수를 찾기 위해 주소를 연산하기 위함 등의 용도로 활용된다.

그 예시로 지역변수 보존 혹은 광장히 구조체, 함수 등 용량이 자료를 콜바이레퍼런스로 전달할 때 사용하거나
리스트 구현, 포인터로 구현된 배열, 구조체에서 원하는 자료를 포인터 연산으로 참조하기 등이 있다.
(구조체는 배열처럼 인덱스가 없다. 따라서 반복되는 자료를 처리할 때 포인터 연산으로 이동하며 연산하면 편리하다.)


●레퍼런스
&??
레퍼런스는 주소를 변수의 주소값을 얻는 것이다...?



레퍼런싱기호, 참조 연산자
&

디레퍼런싱 기호, 역참조 연산자
*


정리한 내용 올리기