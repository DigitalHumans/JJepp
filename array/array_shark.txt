<배열>
연속된 같은 자료형의 변수를 하나로 묶어서 사용
C에서의 배열과 동일
크기와 타입이 고정 (파이선의 리스트와 비슷하지만 다름)

배열을 사용하는 이유?
같은 자료형의 변수를 여러개 선언하는 것 보다 배열을 선언하는 것이 훨씬 편함.
ex)
한 반의 학생들의 평균 점수를 저장할 때,
float student1 = 89.3f, student2 = 99.9f, ... 보다는
float students[30] = {89.3f, 99.9f, ...}; 이 더 간편하다.
또 각 학생들의 점수를 알고 싶을 때,
전자는 student1, student2를 하나하나 확인해야하지만
후자는 반복문 등을 이용해서 간편하게 확인이 가능하다.

<배열의 선언 및 사용>
자료형 변수명[크기] = {초기 내용물};
자료형 변수명[크기]{초기 내용물};
if 초기화X 배열선언, 각 원소별로 초기화 해야함.

배열을 선언한 후 배열에 접근하고 싶을 때, 인덱스를 사용해서 접근한다.
ex)
int num[3] = {1, 2, 3}; 이라고 초기화 했을 때,
num[0] = 1, num[1] = 2, num[2] = 3이다.
인덱스는 0부터 시작한다.

<문자열>
C에서의 문자열과 C++의 문자열이 있음.
C++의 문자열 : string
C의 문자열 : char형의 배열 (크기 지정시 가장 뒤에 NULL문자가 붙음)
C++은 둘다 사용가능하나 string을 권장.

<문자열의 이용>
-string의 경우-
string s; // 초기화 필요
string s2 = "Hello World!";
string s3{Hello World!};
s = "hello World!";

-char의 경우-
char c[30]; // 초기화 필요
char c2[30] = "Hello World!";
char c3[30]{Hello World!};
strcpy(c, "Hello World!"); // cstring 필요

배열의 크기를 동적으로 하는 방법 -> 동적할당, vector
동적할당 -> 변수를 이용한 크기 지정
vector -> 프로그램 실행 도중에 크기가 유동적으로 바뀜

<표준 입출력>
Standard Input Output
C언어에서는 stdio.h
C++에서는 iostream

<표준 입출력 수행>
스트림 연산자 : <<, >>
(쉬프트 연산자도 같은 기호이지만 서로 다른 연산자)
<< -> 아웃스트림 연산자
>> -> 인스트림 연산자

스트림 연산자는 방향을 반대로 하면 안된다.
cout << endl;은 가능하지만 endl << cout;

<표준 출력> -> cout
해당 자료형이 기본 자료형에 속할 경우 각 자료형에 맞게 출력
bool은 0 또는 1로 출력
자료형을 섞어서 보내도 잘 작동된다.
cout << 13 << "Hello" << a << endl; 은 잘 작동한다. (a는 float로 선언 및 초기화되었다고 가정)

<표준 입력> -> cin
받아야 할 자료형에 맞게 변환후 각 변수에 넣어준다.
실패 시 cin.fail()은 참
cin.clear()로 실패 플래그를 초기화 가능
cin.ignore()로 특정 글자가 나오거나 특정 길이만큼 입력을 무시 가능
이 세 메서드(객체 내부의 함수를 부르는 명칭)를 이용해 에러 핸들링 가능
cin >> a >> b >> c; // a, b, c는 기본 자료형의 이미 선언된 변수들.