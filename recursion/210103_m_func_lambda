1. inline 함수 
: 함수 호출 시 컴파일 과정에서 실행 코드로 입력 
ex) inline int sum(int& lhs, int& rhs){return lhs+rhs;}
int main(){cout<<sum(2, 3)<<sum(5, 1)<<endl; return 0;}
==> int main(){cout<<2+3<<5+1<<endl; return 0;}

2. 함수 포인터 
: 선언 시 반환타입과 파라미터 타입 명시 
: () 은 함수 실행 연산자 
ex) int(*funcptr)(int); //int를 받아서 int를 반환하는 함수 포인터
funcptr=func; funcptr(3);
: 함수를 매개 변수로 전달 / 함수 포인터를 이용해 조건을 유동적으로 설정 

3. lambda 
: 익명함수 (일회성 or auto를 이용해 저장 후 사용 가능)
: [사용할 외부변수](파라미터) -> 리턴타입{실행문}
: 함수의 아규먼트 (함수 포인터 대신 사용 가능)
1) 함수 객체와 다르게 class를 선언할 필요 없음
2) 함수 포인터의 단점 : 함수의 인라인화 불가능 해결 > 람다는 가능 (함수 인라인화)
3) 이름은 없지만 고유한 객체이므로 람다의 이름과 타입을 알 수 없지만, 컴파일 과정에서 람다라는 객체 생성 
*** 람다에서 선언된 변수는 프로그램이 끝날 때 까지 변수가 사라지지 않음 
*** 외부 변수와 같은 변수 이름으로 초기화를 하면 해당 외부 변수는 사용되지 않음
